import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class BOJ_2529 {

	private static boolean visited[];
	private static char sign[];
	private static int k;
	private static ArrayList<String> list;
	private static void bruteforce(int depth, String num) {
		if(depth == k+1) {
			list.add(num);
			return;
		}
		for(int i=0;i<10;i++) {
			if (!visited[i]) {
				if (depth == 0 || (sign[depth-1] == '>' && (num.charAt(depth-1) -'0' > i)) || (sign[depth-1] == '<' && (num.charAt(depth-1)-'0' < i)) ) { // 이전값 > 현재값 || 이전값 < 현재값		
					visited[i] = true;
					bruteforce(depth+1, num + Integer.toString(i));
					visited[i] = false;
				}
			}
		}
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		k = Integer.parseInt(br.readLine());   //부등호 문자의 개수
		visited = new boolean[10];    //0 ~ 9에 대해 방문체크
		sign= new char [k];
		list = new ArrayList<>();
		StringTokenizer st = new StringTokenizer(br.readLine());
		for(int i=0;i<k;i++) {
			sign[i] = st.nextToken().charAt(0);
		}
		
		bruteforce(0, "");
		Collections.sort(list);
		System.out.println(list.get(list.size()-1));
		System.out.println(list.get(0));
		
	}

}
