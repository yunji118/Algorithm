package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.StringTokenizer;

public class BOJ_2304 {

	//x기준 정렬 필요
	//가장 높은 기둥을 기준으로 왼쪽, 오른쪽 나누기
	//왼쪽 부분은 가장 높은 기둥보다 작은 값일 때 더하기
	//오른쪽 부분은 가장 마지막 기둥보다 큰 값일 때 더하기 
	private static class Pillar{
		int x, y;
		public Pillar(int x, int y) {
			this.x = x;
			this.y = y;
		}
	}
	public static void main(String[] args) throws IOException{
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		StringTokenizer st;
		ArrayList<Pillar> list = new ArrayList<>();
		Pillar tallest = new Pillar(0,0);
		
		for (int i =0; i< N;i++) {
			st = new StringTokenizer(br.readLine());
			
			int x = Integer.parseInt(st.nextToken());
			int y = Integer.parseInt(st.nextToken());
			
			Pillar p = new Pillar(x,y);
			list.add(p);
			
			//가장 크면서 왼쪽에 있는 기둥 구하기 
			if (tallest.y < y) {
				tallest = p;
			}
		}
		Collections.sort(list, new Comparator<Pillar>() {
			@Override
			public int compare(Pillar o1, Pillar o2) {
				// TODO Auto-generated method stub
				if (o1.x == o2.x)
					return o1.y - o2.y;
				return o1.x - o2.x;
			}
			
		});
		
		Pillar last = new Pillar(0,0);
		int area = 0;
		
		for(int i=0;i<N;i++) {
			Pillar now = list.get(i);
				
			
			
			if (now.y >= last.y) {//현재보다 더 큰 y가 등장
				area += (now.x - last.x) * last.y;
					
				//갱신 
				last = now;
				if (now.x == tallest.x && now.y == tallest.y)
					break;
				
			}
		}
		
		
		
		last = new Pillar(0,0);
		for (int i=N-1;i>=0;i--) {
			Pillar now = list.get(i);
			
			if (now.y >= last.y) {
				area += (last.x - now.x) * last.y;
				last = now;
				if (now.x == tallest.x && now.y == tallest.y)
					break;
			}
			
		}
		
		area += tallest.y;
		

		System.out.println(area);
		
	}

}
