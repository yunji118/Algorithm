import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.math.BigInteger;

public class BOJ_11057 {

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		//오르막수: 천의자리<=백의자리<=십의자리<=일의자리 처럼 각 자리가 오른쪽으로 갈 수록 커져야 함
		int N = Integer.parseInt(br.readLine());    //수의 길이
		int dp[][] = new int [N+1][10];    //앞은 N(수의 길이)를 뜻하고 뒤는 가장 오른쪽에 붙는 한자리    dp[n][i] = n 자리의 숫자 길이 중 맨 뒤의 숫자가 i인 경우의 수
		
		//N이 1인 경우는 모두 한자리수이므로 1로 초기화
		for(int i=0;i<10;i++) {
			dp[1][i] = 1;  
		}
		
		//직전 왼쪽에 수가 무엇이냐가 중요. 현재 수가 j이면 직전의 수는 0~j까지의 수가 모두 오는 경우의 수를 더하면 됨.
		//ex) 현재 4로 끝나면 이전 수가 0,1,2,3,4로 끝나는 경우의 수를 모두 더하면 된다. dp[N][4] = dp[N-1][0] + dp[N-1][1] + dp[N-1][2] + dp[N-1][3] + dp[N-1][4]
		//점화식: dp[N][j] = dp[N-1][0] + dp[N-1][1] + dp[N-1][2] + ... dp[N-1][j]
		for(int i=2;i<=N;i++) {  //2부터 N에 도달할때까지 반복
			for(int j=0;j<10;j++) {   //0~9를 탐색
				for(int w=0;w<=j;w++) {  //이전 값을 탐색. 
					dp[i][j] += dp[i-1][w];
				}
				dp[i][j] %= 10007;
			}
		}
		
		int sum = 0;
		for(int i=0;i<10;i++) {  //N번재 행의 경우를 모두 더해주기
			sum += dp[N][i];
		}
		System.out.println(sum%10007);  //까먹지 말기! 더한 값이 10007보다 클 수 있으므로 더한 값 역시 나머지 연산을 수행
	}

}
