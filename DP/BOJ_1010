import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_1010 {
	
	static int[][] dp = new int [31][31];
	private static int combination(int m, int n) {
		if(dp[m][n] != 0)
			return dp[m][n];
		
		if(m==n || n==0)
			return 1;
		else {
			dp[m][n] = combination(m-1, n-1) + combination(m-1, n);
			return dp[m][n];
		}
	}

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
		
		for(int i=0;i<T;i++) {
			st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());
			int M = Integer.parseInt(st.nextToken());
			
			sb.append(combination(M, N)+"\n");
			
			/*
			 * 다른 방법으로는
			 * 먼저 nC0과 nC1을 1로 전부 채워넣고
			 * for(int i=1;i<=30;i++)
			 * 	for(int j=0;j<i;j++)
			 * 		dp[m][n] = dp[m-1][n-1] + dp[m-1, n]*/
			
		}
		System.out.println(sb.toString());

	}

}
