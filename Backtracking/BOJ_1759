package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class BOJ_1759 {
	
	private static boolean visited[];
	private static String alpha[];
	private static LinkedList<String> ans;
	private static int L, C;
	private static void backtracking(int depth, String str, int idx) {
		if (depth == L) {
			ans.add(str);
			return ;
		}
		
		for(int i=idx;i<C;i++) {
			visited[idx] = true;
			backtracking(depth + 1, str+alpha[i], i+1);
			visited[idx] = false;
		}
	}
	private static boolean isValid(String str) {
		int vowels = 0;
		int consonants = 0;
		for(int i=0;i<str.length();i++) {
			char temp = str.charAt(i);
			if (temp == 'a' || temp == 'e' || temp == 'i' || temp == 'o' || temp == 'u')
				++vowels;
			else
				++consonants;
		}
		if (vowels >= 1 && consonants >= 2)
			return true;
		else
			return false;
	}
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		L = Integer.parseInt(st.nextToken());  //암호 길이 
		C = Integer.parseInt(st.nextToken());  //주어진 알파벳의 개수 
		visited = new boolean[C];
		alpha = new String[C];
		ans = new LinkedList<>();
		st = new StringTokenizer(br.readLine());
		for(int i=0;i<C;i++) {
			alpha[i] = st.nextToken();
		}
		Arrays.sort(alpha);
		backtracking(0, "", 0);
		
		for(int i=0;i<ans.size();i++) {
			String temp = ans.get(i);
			if (isValid(temp))
				System.out.println(temp);
		}

	}

}
