import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_14889 {

	private static int map[][];
	private static boolean visited[];
	private static int N, min = Integer.MAX_VALUE;
	private static void backtracking(int depth, int now) {
		if (depth == N/2) {
			int start = 0;
			int link = 0;
			for(int i=0;i<N-1;i++) {
				for(int j=i+1;j<N;j++) {
					if (visited[i] == true && visited[j] == true) {
						start += map[i][j];
						start += map[j][i];
					}
					else if (visited[i] == false && visited[j] == false) {
						link += map[i][j];
						link += map[j][i];
					}
				}
			}
			min = Math.min(Math.abs(start - link), min);
			return ;
		}
		for(int i=now;i<N;i++) {
			if(visited[i] == false) {
				visited[i] = true;
				backtracking(depth + 1, i + 1);
				visited[i] = false;
			}
		}
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		map= new int [N][N];
		visited = new boolean[N];
		for(int i=0;i<N;i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		backtracking(0, 0);
		System.out.println(min);
		

	}

}
