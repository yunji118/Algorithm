import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_1182 {

	private static int S, N,ans;
	private static int input[], arr[];
	
	private static void dfs(int depth, int now) {  //부분집합의 길이가 양수이므로 원소가 적어도 1개 이상 있어야함. 따라서 depth가 >=1 이어야함!
		if(depth >= 1 && depth <=N) {
			int sum = 0;
			for(int i=0;i<N;i++) {
				sum+=arr[i];  //배열에 저장된 수를 모두 더하기
			}
			if(sum == S)
				ans++;
		}
		
		for(int i=now;i<N;i++) {
			arr[i] = input[i];  //해당 자리에 원소 넣기
			dfs(depth+1, i+1);
			arr[i] = 0;  //다시 비워주기
		}
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());   //정수의 개수
		S = Integer.parseInt(st.nextToken());  //만들어야하는 정수
		
		arr = new int [N];
		ans = 0;
		st = new StringTokenizer(br.readLine());
		input = new int [N];
		for(int i=0;i<N;i++) {
			input[i] = Integer.parseInt(st.nextToken());
		}
		
		dfs(0, 0);
		System.out.println(ans);
		
	}

}
