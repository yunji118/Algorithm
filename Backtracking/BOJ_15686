import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.StringTokenizer;

public class BOJ_15686 {

	private static int map[][];
	private static int N, M, min = Integer.MAX_VALUE;
	private static LinkedList<Cord> chicken;
	private static LinkedList<Cord> house;
	private static boolean visited[];
	private static class Cord{
		int r, c;
		public Cord(int r, int c) {
			// TODO Auto-generated constructor stub
			this.r = r;
			this.c = c;
		}
	}
	private static int Calc() {
		int dist[][] = new int [house.size()][1];
		for(int i=0;i<house.size();i++) {
			dist[i][0] = Integer.MAX_VALUE;
		}
		
		for(int i=0;i<house.size();i++) {
			int hr = house.get(i).r;
			int hc = house.get(i).c;
			for(int j=0;j<chicken.size();j++) {
				if (visited[j] == true) {
					int cr = chicken.get(j).r;
					int cc = chicken.get(j).c;
					dist[i][0] = Math.min(dist[i][0], Math.abs(hr-cr) + Math.abs(hc-cc));
				}
			}
		}
		int ans = 0;
		for(int i=0;i<house.size();i++)
			ans += dist[i][0];
		return ans;
		
	}
	private static void backtracking(int depth, int now) {
		if (depth == M) {
			//전체 집들의 치킨거리 계산
			int temp = Calc();
			//min갱신
			min = Math.min(min, temp);
			return ;
		}
		for(int i=now;i<chicken.size();i++) {
			if (visited[i] == false) {
				visited[i] = true;
				backtracking(depth + 1, i + 1);
				visited[i] = false;
			}
		}
		
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());  //도시의 크기 N*N
		M = Integer.parseInt(st.nextToken());  //폐업시키지 않을 치킨집의 개수
		map = new int [N+1][N+1];
		chicken = new LinkedList<>();
		house = new LinkedList<>();
		for(int i=1;i<=N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=1;j<=N;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 2) {
					chicken.add(new Cord(i, j));
				}
				else if (map[i][j] == 1) {
					house.add(new Cord(i, j));
				}
			}
		}
		visited = new boolean[chicken.size()];
		backtracking(0, 0);
		System.out.println(min);
	}
}
