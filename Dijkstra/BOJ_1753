import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class BOJ_1753 {
	
	private static class Edge implements Comparable<Edge>{
		int v, cost;
		public Edge(int v, int cost) {
			// TODO Auto-generated constructor stub
			this.v = v;
			this.cost = cost;
		}
		@Override
		public int compareTo(Edge o) {  //cost비용의 오름차순으로 정렬
			// TODO Auto-generated method stub
			return this.cost - o.cost;
		}
		
	}

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int V = Integer.parseInt(st.nextToken());   //정점의 개수
		int E = Integer.parseInt(st.nextToken());   //간선의 개수
		int K = Integer.parseInt(br.readLine());   //시작 정점의 번호
		int dist[] = new int [V+1];
		boolean visited[] = new boolean [V+1];
		ArrayList<Edge> list[] = new ArrayList[V+1];
		
		//거리배열 초기화하기
		for(int i=1;i<=V;i++) {
			dist[i] = Integer.MAX_VALUE;
		}
		
		//인접리스트 초기화
		for(int i=1;i<=V;i++) {
			list[i] = new ArrayList<Edge>();
		}
		
		
		//입력받고 인접리스트에 넣어주기
		for(int i=0;i<E;i++) {
			st = new StringTokenizer(br.readLine());
			int u = Integer.parseInt(st.nextToken());
			int v = Integer.parseInt(st.nextToken());
			int cost = Integer.parseInt(st.nextToken());
			
			list[u].add(new Edge(v, cost));
		}
		
		
		//출발지 입력
		dist[K] = 0;
		PriorityQueue<Edge> pq = new PriorityQueue<>();
		pq.add(new Edge(K, dist[K]));
		Edge now;
		
		while(!pq.isEmpty()) {
			
			now = pq.poll();  //햔제 정점으로부터 
			if(visited[now.v] == true)  //이미 방문한 경우
				continue;
			
			for(Edge next:list[now.v]) {  //현재 보고있는 정점(now)와 연결된 모든 정점을 살피기
				if(!visited[next.v] && dist[next.v]>now.cost+next.cost) {  //아직 방문 안 한 정점이고, 새로 구한 길이가 기존에 알고있던 길이보다 짧다면 갱신
					dist[next.v] = now.cost+next.cost;   //거리 갱신
					pq.add(new Edge(next.v, dist[next.v]));  //우선순위 큐에 넣어주기
				}
			}
			
			visited[now.v] = true;
		}
		
		for(int i=1;i<=V;i++) {
			if(dist[i] == Integer.MAX_VALUE)
				System.out.println("INF");
			else
				System.out.println(dist[i]);
		}
		

	}

}
