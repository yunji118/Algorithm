import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.StringTokenizer;

public class BOJ_1446 {
	
	private static class Edge implements Comparable<Edge>{
		int start, end, len;
		public Edge(int start,int end, int len) {
			// TODO Auto-generated constructor stub
			this.start = start;
			this.end = end;
			this.len = len;
		}
		
		@Override
		public int compareTo(Edge o) {  
			// TODO Auto-generated method stub
			if(this.start == o.start)  //시작지점이 같으면 끝지점을 기준으로
				return this.end - o.end;
			return this.start-o.start;  //시작점을 기준으로 오름차순 정렬
		}
		
	}
	

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());  //지름길의 개수
		int D = Integer.parseInt(st.nextToken());  //고속도로의 길이
		
		ArrayList<Edge> adjList = new ArrayList<>();

		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int len = Integer.parseInt(st.nextToken());
			
			if(end>D)  //D보다 도착지점이 먼 경우. 역주행이 불가능하므로 제외하기
				continue;
			
			if(end-start <= len)  //주어진 길이 지름길인가?
				continue;
			
			adjList.add(new Edge(start, end, len));  //지름길 저장
		}
		
		//시작점을 기준으로 오름차순 정렬
		Collections.sort(adjList);
	
		int idx = 0;
		int	totalmove = 0;
		int dist[] = new int [D+1];  //현재 지점과의 거리를 저장
		Arrays.fill(dist, Integer.MAX_VALUE);  //   
		dist[0] = 0;
		
		while(totalmove<D) { //전체 움직인 거리가 D에 도달하지 않은 경우
			if(idx<adjList.size()) {  //지름길이 있는 경우
				Edge e = adjList.get(idx);
				
				if(e.start == totalmove) {  //지름길의 시작지점 ==현재 시작지점
					dist[e.end] = Math.min(dist[totalmove]+e.len, dist[e.end]);   //새로 갱신되는 값과 현재 들어있는 값을 비교하기   현재 거리에서 end까지 지름길로 간 값 vs end지점까지 가는데 걸리는 거리의 값
					idx++;
				}
				else {  //dist+1 씩 이동하기
					dist[totalmove+1] = Math.min(dist[totalmove]+1, dist[totalmove + 1]); 
					totalmove++;
				}
			}
			else {  //지름길 없는 경우
				dist[totalmove+1] = Math.min(dist[totalmove]+1, dist[totalmove + 1]); 
				totalmove++;
			}
		}
		System.out.println(dist[D]);
		
	}

}
