import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_18116 {

	private static int parents[];
	private static int counts[];  //count배열에 각 로봇의 찾은 부품개수를 저장한다는 아이디어를 떠올리지 못했다.
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		parents = new int [1000001];
		counts = new int [1000001];
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
		
		//부모배열, 개수 배열 초기화
		for(int i=0;i<parents.length;i++) {
			parents[i] = i;
			counts[i] = 1;  //로봇i에 대해 부품i는 무조건 그 부품이라고 일단 설정
		}
			
		
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			String alpha = st.nextToken();
			
			if(alpha.equals("I")) {  //부품 2개가 같은 부품인지 알려줌
				int a = Integer.parseInt(st.nextToken());
				int b = Integer.parseInt(st.nextToken());
				union(a,b);   //a와 b를 같은 부모로 연결하기
				
			}
			else if(alpha.equals("Q")) {   //어떤 로봇의 부품이 몇 개인지 물어볼 때
				int rRoot = find(Integer.parseInt(st.nextToken()));  //해당 부품의 부모
				sb.append(counts[rRoot]+"\n");
			}
		}
		System.out.println(sb.toString());
		

	}
	
	private static int find(int x) {
		if(x == parents[x]) {
			return x;
		}
		return parents[x]=find(parents[x]);
	}
	private static void union(int a, int b) {  //로봇의 부품들 중 가장 작은 수 i가 로봇i가 됨. 그리고 로봇i의 부모가 됨.
		int aRoot = find(a);
		int bRoot = find(b);
		if(aRoot != bRoot) {
			if(a>b) {
				parents[aRoot] = bRoot;
				counts[bRoot] += counts[aRoot]; //bRoot가 부모가 되므로 로봇bRoot의 부품 개수를 늘려주기 
			}
				
			else {
				parents[bRoot] = aRoot;	
				counts[aRoot] += counts[bRoot];
			}
		}
	}

}
