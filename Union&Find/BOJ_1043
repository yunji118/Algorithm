import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class BOJ_1043 {

	private static int parents[];
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken()); //사람의 수
		int M = Integer.parseInt(st.nextToken()); //파티의 수
		
		//부모배열 초기화
		parents = new int [N+1];
		for(int i=0;i<=N;i++)
			parents[i] = i;
		
		//진실을 아는 사람
		st = new StringTokenizer(br.readLine());
		int truenum = Integer.parseInt(st.nextToken());
		boolean knowtrue[] = new boolean[N+1];
		for(int i=0;i<truenum;i++) {
			knowtrue[Integer.parseInt(st.nextToken())] = true;  //진실을 알면 true, 모르면 false
		}
		
		
		//파티에 오는 사람 입력받기
		ArrayList<Integer> party[] = new ArrayList[M];
		
		for(int i=0;i<M;i++)
			party[i] = new ArrayList<>();
		
		int pre = 0;
		int cur;
		for(int i=0;i<M;i++) {  //파티 개수만큼 
			st = new StringTokenizer(br.readLine());
			int partynum = Integer.parseInt(st.nextToken());  //현재 파티에 참석해있는 사람 수
			if(partynum>0) { 
				pre = Integer.parseInt(st.nextToken()); 
				party[i].add(pre);
			}
			
			for(int j=1;j<partynum;j++) {
				cur = Integer.parseInt(st.nextToken());
				party[i].add(cur);
				union(pre, cur);  //앞사람과 지금 사람을 union해서 같은 부모를 심어주기
				pre = cur;
			}
		}
		
		//진실을 아는 사람들의 부모는 같이 파티를 참여했으므로 true로 바꾸기
		int parent;
		for(int i=1;i<N+1;i++) {
			if(knowtrue[i] == true) {
				knowtrue[find(i)] = true;
			}
		}
		
		//파티를 전부 살피면서 진실을 아는 사람이 있는지 없는지 체그
		int ans=0;
		for(int i=0;i<M;i++) {
			if(party[i].size() > 0) {
				parent = find(party[i].get(0));
				if(knowtrue[parent] == false)
					ans++;
			}
		}
		
		System.out.println(ans);
		
		
	
	}
	private static int find(int x) {
		if(parents[x] == x)
			return parents[x] = x;
		else
			return find(parents[x]);
	}
	
	private static boolean union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		
		if(aRoot == bRoot)
			return false;
		else {
			if(a>b) {
				parents[aRoot] = bRoot;
			}
			else
				parents[bRoot] = aRoot;
			
			return true;
		}
	}

}
