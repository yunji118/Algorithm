import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_24391 {

	private static int parents[];
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken()); //강의의 개수
		int M = Integer.parseInt(st.nextToken()); //건물의 쌍의 개수
		int lesson[] = new int [N];
		
		//부모배열 선언 및 초기화
		parents = new int [N+1];
		for(int i=1;i<=N;i++)
			parents[i] = i;
		
		
		//연결되어있는 건물 입력받기
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			
			union(a,b);  //연관관계 맺어주기
		}
		
		//강의 시간표 입력받기
		st = new StringTokenizer(br.readLine());
		for(int i=0;i<N;i++) {
			lesson[i] = Integer.parseInt(st.nextToken());  
		}
		
		
		//강의 시간표를 전부 살피면서 건물이 연결되어있나 확인하기
		int out = 0;
		int pre = lesson[0];
		int cur;
		for(int i=1;i<N;i++) {
			cur = lesson[i];
			if(find(pre) != find(cur)) { //서로 연결되어있지 않으면
				out++; //밖으로 나가기
			}
			pre = cur;
		}
		System.out.println(out);
		
	}
	
	private static int find(int x) {
		if(x == parents[x])
			return x;
		return parents[x]=find(parents[x]);
	}
	
	private static boolean union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		
		if(aRoot == bRoot)
			return false;
		else {
			if(a>b)
				parents[aRoot] = bRoot;
			else
				parents[bRoot] = aRoot;
			return true;
		}
	}

}
