import java.io.IOException;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.Comparator;
import java.util.StringTokenizer;

public class BOJ_16562_uf {

	private static int parents[];
	private static boolean isfriends[];
	
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());  //학생 수
		int M = Integer.parseInt(st.nextToken());  //친구 관계 수
		int k = Integer.parseInt(st.nextToken());  //가지고 있는 돈
		int money[][] =  new int [N][2];  //N개의 학생이 원하는 친구 비
		st = new StringTokenizer(br.readLine());
		for(int i=0;i<N;i++) {// (친구 번호, 친구비)
			money[i][0] = i+1;  //친구번호 저장
			money[i][1] = Integer.parseInt(st.nextToken());   //i번 친구가 원하는 친구비 저장
		}
		
		//친구비의 오름차순으로 저장
		Arrays.sort(money, new Comparator<int []>() {
			@Override
			public int compare(int[] o1, int[] o2) {
				// TODO Auto-generated method stub
				if(o1[1] == o2[1])
					return o1[0]-o2[0];
				return o1[1]-o2[1];
			}
		});
		
		parents = new int[N+1];
		for(int i=0;i<N+1;i++) {
			parents[i] = i;
		}
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			union(a,b);  //부모 맺어주기
		}
		
		isfriends = new boolean[N+1];
		
		//친구 관계인 애들은 모두 같은 부모를 심어주기
		int num;
		
		int cost = 0;
		for(int i=1;i<=N;i++) {
			num = find(money[i-1][0]);  //현재 보고있는 친구의 부모를 찾기
			if(isfriends[num] == false) {  //친구인가?
				cost += money[i-1][1];
				isfriends[num] = true;  //친구 맺기
			}
		}
		
		if(cost<=k) {
			System.out.println(cost);
		}
		else {
			System.out.println("Oh no");
		}

	}

	private static int find(int x) {
		if(x == parents[x])
			return x;
		return parents[x] = find(parents[x]);
	}
	
	private static void union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		if(a>b) {
			parents[aRoot] = bRoot;
		}
		else {
			parents[bRoot] = aRoot;
		}	
		
	}

}
