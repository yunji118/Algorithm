package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_1926 {
	
	private static int N;  //세로 
	private static int M;  //가로
	private static int map[][];
	private static boolean visited[][];
	private static int numofpic;
	private static int maxsize;
	
	private static class Cord{
		int r, c;
		public Cord(int r, int c) {
			// TODO Auto-generated constructor stub
			this.r = r;
			this.c = c;
		}
	}
	
	private static void bfs(int sr, int sc) {
		int dr[] = {0,0,-1,1};
		int dc[] = {1,-1,0,0};
		Queue<Cord> que = new LinkedList<>();
		que.add(new Cord(sr, sc));
		int temp = 0;
		numofpic++;
		
		while (!que.isEmpty()) {
			int nowr = que.peek().r;
			int nowc = que.peek().c;
			que.poll();
			temp++;
			
			for(int i=0;i<4;i++) {
				int nextr = nowr + dr[i];
				int nextc = nowc + dc[i];
				if (nextr >= 0 && nextr < N && nextc >= 0 && nextc < M && map[nextr][nextc] == 1 && visited[nextr][nextc] == false)
				{
					que.add(new Cord(nextr, nextc));
					visited[nextr][nextc] = true;
				}
			}
		}
		maxsize = Math.max(maxsize, temp);
	}

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int [N][M];
		visited = new boolean[N][M];
		numofpic = 0;
		maxsize = 0;
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for (int j=0;j<M;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				if(map[i][j] == 1 && !visited[i][j]) {
					visited[i][j] = true;
					bfs(i,j);
				}				
			}
		}
		System.out.println(numofpic);
		System.out.println(maxsize);
	}

}
