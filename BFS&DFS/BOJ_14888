import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_14888 {

	private static int N;
	private static int num[];  //피연산자 저장
	private static int op[];   //각 연산자의 개수 저장
	private static int max = Integer.MIN_VALUE;
	private static int min = Integer.MAX_VALUE;
	
	private static void dfs(int depth, int res) {
		if(depth == N) {
			max = Math.max(max, res);
			min = Math.min(min, res);
			return;
		}
		
		for(int i=0;i<4;i++) {
			if (op[i] != 0) {
				--op[i]; //i 연산자 쓰는 경우
				
				switch (i) {  //각 연산자에 맞게 num[depth] 연산한 값으로 다음 dfs 진행하기
				case 0:  // +
					dfs(depth + 1, res + num[depth]);
					break;
				case 1: // -
					dfs(depth + 1, res - num[depth]);
					break;
				case 2:  //*
					dfs(depth + 1, res * num[depth]);
					break;
				case 3:  // /
					dfs(depth + 1, res / num[depth]);
					break;
				}
				
				++op[i];  //원상복구. i연산자를 쓰지 않은 경우로 돌려놓기
			}
		}
	}
	
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());   //피연산자의 개수
		num = new int [N]; 
		StringTokenizer st = new StringTokenizer(br.readLine());
		for(int i=0; i<N; i++) {
			num[i] = Integer.parseInt(st.nextToken());
		}
		
		op = new int [4];
		st = new StringTokenizer(br.readLine());
		for(int i = 0; i < 4;i++) {
			op[i] = Integer.parseInt(st.nextToken());
		}
		dfs(1, num[0]);
		
		System.out.println(max);
		System.out.println(min);
	}

}
