import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.StringTokenizer;

public class BOJ_11725 {
	
	static ArrayList<Integer> tree[];
	static int N;
	static boolean visited[];
	static int parents[];
	
	//now가 누구의 부모인가? 에 집중해서 풀자.
	private static void dfs(int now, int parent) {  //now는 누구의 부모인지 찾아주기. parent는 now의 부모이다.
		for(int i=0;i<tree[now].size();i++) {   //현재 보고있는 노드와 연결된 간선을 모두 살펴보기
			int node = tree[now].get(i);
			if(node == parent) { //연결된 간선 중 부모 노드는 제외하기
				continue;
			}
			parents[node] = now;  //노드의 부모가 now이다
			dfs(node, now); //노드는 누구의 부모인가?
		}
	}

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine()); //노드의 개수
		StringTokenizer st;
		tree = new ArrayList[N+1];
		visited = new boolean[N+1];
		parents = new int [N+1]; //index의 부모가 value
		
		for(int i=1;i<=N;i++) {
			tree[i] = new ArrayList<>();
		}
		
		for(int i=0;i<N-1;i++) {
			st = new StringTokenizer(br.readLine());
			int a = Integer.parseInt(st.nextToken());
			int b = Integer.parseInt(st.nextToken());
			tree[a].add(b);
			tree[b].add(a);
		}
		
		dfs(1, -1);   //1과 연결된 애들은 모두 1을 부모로 함(1이 root이므로) 그래서 parent에 없는 값인 -1을 넘겨준다.
		
		for(int i=2;i<=N;i++) {
			System.out.println(parents[i]);
		}

	}

}
