package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_2583 {
	
	private static int M, N, K, size;
	private static boolean map[][];
	private static boolean visited[][];
	private static class Cord{
		int r, c;
		public Cord(int r, int c) {
			// TODO Auto-generated constructor stub
			this.r = r;
			this.c = c;
		}
	}
	private static void bfs(int sr, int sc) {
		Queue<Cord> que = new LinkedList<>();
		que.add(new Cord(sr, sc));
		int dr[] = {0,0,1,-1};
		int dc[] = {1,-1,0,0};
		size = 0;
		
		while(!que.isEmpty()) {
			int nowr = que.peek().r;
			int nowc = que.peek().c;
			que.poll();
			++size;
			
			for(int i=0;i<4;i++) {
				int nr = nowr + dr[i];
				int nc = nowc + dc[i];
				if (nr >= 0 && nr <M && nc >=0 && nc < N && !visited[nr][nc] && !map[nr][nc]) {
					que.add(new Cord(nr, nc));
					visited[nr][nc] = true;
				}
			}
		}
		
		
	}
	
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		map = new boolean [M][N];
		visited = new boolean [M][N];
		int x1, x2, y1, y2;
		int width, height;
		for(int i=0;i<K;i++) {
			st = new StringTokenizer(br.readLine());
			x1 = Integer.parseInt(st.nextToken());
			y1 = Integer.parseInt(st.nextToken());
			x2 = Integer.parseInt(st.nextToken());
			y2 = Integer.parseInt(st.nextToken());
			width = Math.abs(x1-x2);
			height = Math.abs(y1-y2);
			
			for(int u=0;u<height;u++) {
				for(int v=0;v<width;v++) {
					map[u + M - y2][v + x1] = true;
				}
			}
		}
		int numofarea = 0;
		LinkedList<Integer> list = new LinkedList<>();
		for(int i=0;i<M;i++) {
			for(int j=0;j<N;j++) {
				if (!visited[i][j] && !map[i][j]) {
					++numofarea;
					visited[i][j] = true;
					bfs(i,j);
					list.add(size);
				}
			}
		}
		System.out.println(numofarea);
		Collections.sort(list);
		for(int i=0;i<list.size();i++)
			System.out.print(list.get(i) + " ");
		
		
	}

}
