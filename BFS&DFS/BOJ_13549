package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_13549 {
	
	private static int N, K;
	private static int visited[];
	
	private static void bfs() {
		Queue<int []> que = new LinkedList<>();
		que.add(new int[] {N, 1});  //수빈이의 현재 위치, 1 (시간) 결과 출력시 1 빼
		visited[N] = 1;
		
		while (!que.isEmpty()) {
			int p[] = que.poll();
			int soobin = p[0];
			int time = p[1];
			
//			if (soobin == K) {
//				System.out.println(move);
//				return;
//			}
			
			if (soobin * 2 < 100001 && soobin * 2 >= 0 && (visited[soobin * 2] > time || visited[soobin * 2] == 0)) {
				visited[soobin * 2] = time;
				que.add(new int[] {soobin * 2, time});
			}
			if (soobin + 1 < 100001 && soobin + 1 >= 0 && (visited[soobin + 1] > time + 1 || visited[soobin + 1] == 0)) {
				visited[soobin + 1] = time + 1;
				que.add(new int [] {soobin + 1, time + 1});
			}
			if (soobin - 1 < 100001 && soobin - 1 >= 0 && (visited[soobin - 1] > time + 1 || visited[soobin - 1] == 0)) {
				visited[soobin - 1] = time + 1;
				que.add(new int[] {soobin - 1, time + 1});
			}
		}
		System.out.println(visited[K] - 1);
	}

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		K = Integer.parseInt(st.nextToken());
		visited = new int[100001];
		bfs();
		
	}

}
