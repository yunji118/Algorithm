package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_1743 {

	private static int N, M, max, cnt;
	private static int map[][];
	private static boolean visited[][];
	private static int dr[]= {0,0,-1,1};
	private static int dc[]= {1,-1,0,0};
	public static void dfs(int r, int c) {
		
		for(int i=0;i<4;i++) {
			int nr = r + dr[i];
			int nc = c + dc[i];
			if (nr >= 0 && nr < N && nc >= 0 && nc < M && !visited[nr][nc] && map[nr][nc] > 0) {
				visited[nr][nc] = true;
				++cnt;
				dfs(nr, nc);
			}	
		}
	}
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken()); //세로
		M = Integer.parseInt(st.nextToken()); //가로
		int K = Integer.parseInt(st.nextToken()); //떨어진 음식물의 개수
		map = new int [N][M];
		visited = new boolean[N][M];
		max = 0;
		for(int i=0;i<K;i++) {
			st = new StringTokenizer(br.readLine());
			int r = Integer.parseInt(st.nextToken()) - 1;
			int c = Integer.parseInt(st.nextToken()) - 1;
			map[r][c] = 1; // 음식물 
		}
		for(int i=0;i<N;i++) {
			for(int j=0;j<M;j++) {
				if (!visited[i][j] && map[i][j] > 0) {
					cnt = 1;
					visited[i][j] = true;
					dfs(i,j);
					max = Math.max(cnt, max);
				}
			}
		}
		
		System.out.println(max);

	}

}
