package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_17086 {

	private static int map[][], dist[][];
	private static int N, M, ans;
	private static Queue<Cord> que;
	private static class Cord{
		int r, c;
		public Cord(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}
	private static void bfs() {
		int dr[] = {0,0,-1,1,-1,-1,1,1};
		int dc[] = {1,-1,0,0,1,-1,-1,1};
		
		while(!que.isEmpty()) {
			Cord tmp = que.poll();
			for(int i=0;i<8;i++) {
				int nr = tmp.r + dr[i];
				int nc = tmp.c + dc[i];
				if (nr >= 0 && nr < N && nc >= 0 && nc < M && dist[nr][nc] == 0 && map[nr][nc] == 0) {
					que.add(new Cord(nr, nc));
					dist[nr][nc] = dist[tmp.r][tmp.c] + 1;
					ans = Math.max(ans, dist[nr][nc]); 
				}
			}

		}
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		ans = 0;
		dist = new int[N][M];
		map = new int [N][M];
		que = new LinkedList<>();
		
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<M;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 1)
					que.add(new Cord(i, j));
					
			}
		}
		bfs();
		System.out.println(ans);
		

	}

}
