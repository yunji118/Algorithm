import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_2468 {

	private static int map[][];
	private static boolean visited[][];
	private static int N;
	private static class Cord{
		int r,c;
		public Cord(int r, int c) {
			// TODO Auto-generated constructor stub
			this.r = r;
			this.c = c;
		}
	}
	private static void bfs(int sr, int sc, int level) {
		int dr[] = {0, 0, 1, -1};  //동서남북
		int dc[] = {1, -1, 0, 0};
		Queue<Cord> que = new LinkedList<>();
		que.add(new Cord(sr, sc));
		
		while (!que.isEmpty()) {
			int nowr = que.peek().r;
			int nowc = que.peek().c;
			que.poll();
			for(int k=0;k<4;k++) {  //동서남북 살펴보기
				int newr = nowr + dr[k];
				int newc = nowc + dc[k];
				if (newr >= 0 && newr < N && newc >= 0 && newc < N && map[newr][newc] > level && visited[newr][newc] == false && map[newr][newc] > level) {
					que.add(new Cord(newr, newc));
					visited[newr][newc] = true;
				}
			}
		}
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		map = new int [N][N];
		int highest = 0;
		for(int i=0;i<N;i++) {
			StringTokenizer st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				highest = Math.max(map[i][j], highest);  //최대 건물 높이를 저장
			}
		}
		int max = 0;
		for(int h=0;h<highest;h++) {   //최대 건물 높이 -1까지 bfs돌리기
			visited = new boolean[N][N];
			int areanum = 0;
			for(int r=0;r<N;r++) {
				for(int c=0;c<N;c++) {
					if (visited[r][c] == false && map[r][c] > h) {  //아직 방문을 안했고 h보다 높다면
						bfs(r,c,h); //해당 지점부터 bfs돌기
						++areanum;
					}
				}
			}
			max = Math.max(max, areanum);
		}
		System.out.println(max);
	}

}
