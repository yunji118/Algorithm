import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_7576 {

	private static int map[][];
	private static int N, M;
	private static LinkedList<Cord> tomato;
	private static class Cord{
		int r, c;
		public Cord(int r, int c) {
			this.r = r;
			this.c = c;
		}
	}
	private static void bfs() {
		int dr[] = {0,0,1,-1}; //동 서 남 북
		int dc[] = {1,-1,0,0};
		LinkedList<Cord> que = new LinkedList<>();
		que = tomato;
		while (!que.isEmpty()) {
			int nowr = que.peek().r;
			int nowc = que.peek().c;
			que.poll();
			for(int i=0;i<4;i++) {
				int nextr = nowr + dr[i];
				int nextc = nowc + dc[i];
				if (nextr >= 0 && nextr <N && nextc >=0 && nextc <M && map[nextr][nextc] == 0) { //정상범위 안에 있고 안 익은 토마토라면
					map[nextr][nextc] = map[nowr][nowc] + 1;
					que.add(new Cord(nextr, nextc));
				}
			}
		}
		
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		M = Integer.parseInt(st.nextToken());  //가로
		N = Integer.parseInt(st.nextToken());  //세로
		map = new int [N][M];
		tomato = new LinkedList<>();
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<M;j++) {
				map[i][j] = Integer.parseInt(st.nextToken());
				if (map[i][j] == 1)
					tomato.add(new Cord(i, j));
			}
		}
		bfs();
		
		boolean flag = true;
		int ans = -1;
		for(int i=0;i<N;i++) {
			for (int j=0;j<M;j++) {
				if (map[i][j] == 0) {
					flag = false;
					break;
				}
				if (ans < map[i][j])
					ans = map[i][j];
			}
			if (flag == false)
				break;
		}
		
		if (flag == false)
			System.out.println(-1);
		else
			System.out.println(ans-1);

	}

}
