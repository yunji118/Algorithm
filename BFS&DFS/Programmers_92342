import java.io.*;
import java.util.*;
class Solution {
    
    static int maxdiff = 0; //최대 점수차
    
    //최대 점수차와 현재 점수차가 동일한 경우
    Boolean compare(int[] ryan, int[] answer){
        for(int i=10;i>=0;i--){ //작은 점수대부터 비교하기
            if(ryan[i]>answer[i])
                return true;
            else if(ryan[i] < answer[i])
                return false;
        }
        return false;
    }
    
    
    public void calcScore(int[] ryan, int[] apeach, int[] answer){
        int apeachscore = 0;
        int ryanscore = 0;
        for(int i=0;i<=10;i++){
            if(ryan[i]>apeach[i])
                ryanscore += 10-i;
            else if(apeach[i] >0){ // 해당 과녁에 라이언보다 어피치가 쏜 화살이 많은 경우
                apeachscore += 10-i;
            }
        }
        int diff = ryanscore-apeachscore;
        if(diff>0 && maxdiff<= diff){  
            //현재 점수차 == 최대 점수차인 경우. 낮은 점수대에 화살이 더 많은지 확인하기
            if(maxdiff == diff && !compare(ryan, answer))
                return;
            maxdiff = diff; //갱신
            for(int i=0;i<answer.length;i++)
                answer[i] = ryan[i];
        }
        
    }
    
    public void dfs(int idx, int arrows, int[] ryan, int[] apeach, int[] answer ){
        
        if(idx==11 || arrows == 0){  //과녁 끝까지 다 보거나 화살을 다 쏜 경우
            ryan[10] += arrows;  //0점 과녁에 남은 화살 다 쏘기
            calcScore(ryan, apeach, answer);
            ryan[10] -= arrows;  //다음 탐색을 위해 화살수 다시 돌려놓기
            return;
        }
        
        if(apeach[idx] < arrows){  //어피치가 해당 점수에 쏜 화살 vs 라이언이 현재 보유하고 있는 화살
            ryan[idx] += apeach[idx]+1;  //어피치의 화살수보다 1많게 쏘기
            dfs(idx+1, arrows-apeach[idx]-1, ryan, apeach, answer);  //해당 점수대에 화살을 쏜 경우
            ryan[idx] -= apeach[idx]+1; //다음 탐색을 위해 화살수 돌려놓기
        }
        dfs(idx+1, arrows, ryan, apeach, answer); //해당 점수대에 화살을 쏘지 않은 경우
    }
    public int[] solution(int n, int[] info) {
        int[] answer = {-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1};
        int[] ryan = new int [11];
        
        dfs(0,n,ryan, info, answer);
        
        if(answer[0]==-1){ //이길 수 없는 경우
            int[] looseAnswer = {-1};
            return looseAnswer;
        }
        
        return answer;
    }
}
