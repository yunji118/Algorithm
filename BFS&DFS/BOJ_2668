package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Collections;
import java.util.LinkedList;

public class BOJ_2668 {
	
	private static int N;
	private static boolean visited[];
	private static int num[];
	private static LinkedList<Integer> list;
	private static void dfs(int start, int target) {
		if (num[start] == target) {//도착지점에 도달했는가? 
			list.add(target);
		}
		
		if(!visited[num[start]]) { 
			visited[num[start]] = true;
			dfs(num[start], target);
			visited[num[start]] = false;
		}
	}

	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		N = Integer.parseInt(br.readLine());
		num = new int [N+1];
		visited = new boolean[N+1];
		list = new LinkedList<>();  //발생할 사이클을 넣음 
		for(int i=1;i<=N;i++) {
			num[i] = Integer.parseInt(br.readLine());
		}
		
		for(int i=1;i<=N;i++) {
			visited[i] = true;			
			dfs(i,i); //현재 출발 숫자, 도착지점 숫자 
			visited[i] = false;
		}
	
		Collections.sort(list);
		System.out.println(list.size());
		for(int i=0;i<list.size();i++) {
			System.out.println(list.get(i));
		}
	}

}
