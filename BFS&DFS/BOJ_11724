import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_11724 {

	static int N, M, count;
	static boolean visited[];
	static int map[][];
	private static void bfs(int num) {
		Queue<Integer> que = new LinkedList<Integer>();
		que.offer(num);
		int temp;
		visited[num] = true;
		
		while(!que.isEmpty()) {
			temp = que.poll(); //num과 연결되어있어서 새로 탐색할 노드
			
			for(int i=1; i<=N; i++) {
				if(visited[i] == false && map[temp][i] == 1) {
					visited[i] = true;
					que.offer(i);
				}
			}
		}
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		N = Integer.parseInt(st.nextToken());
		M = Integer.parseInt(st.nextToken());
		map = new int [N+1][N+1];
		visited = new boolean[N+1];
		count = 0;
		
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			int first = Integer.parseInt(st.nextToken());
			int second = Integer.parseInt(st.nextToken());
			map[first][second] = map[second][first] = 1; //서로 연결되어있다는 표시
		}
		
		for(int i=1;i<=N;i++) {
			if(!visited[i]) {
				bfs(i); //i에 대해 탐색
				count++;
			}
		}
		System.out.println(count);
	}

}
