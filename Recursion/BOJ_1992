package boj;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class BOJ_1992 {

	private static int map[][];
	private static StringBuilder sb;
	private static boolean allSame(int size, int r, int c) {
		int num = map[r][c];
		for(int i=r;i<r+size;i++) {
			for(int j=c;j<c+size;j++) {
				if (num != map[i][j])
					return false;
			}
		}
		return true;
	}
	private static void quadtree(int size, int r, int c) {
		if (allSame(size, r, c)) { //현재 보고 있는 영역의 값이 모두 같은 경우 
			sb.append(map[r][c]);
			return;
		}
		int newsize = size/2;
		sb.append("(");  //분할이 들어가는 경우 (로 시작해야함
		quadtree(newsize, r, c);
		quadtree(newsize, r, c+newsize);
		quadtree(newsize, r+newsize, c);
		quadtree(newsize, r+newsize, c+newsize);
		sb.append(")");  //현재 영역에서 분할 끝남 
	}
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		map = new int [N][N];
		sb = new StringBuilder();
		for(int i=0;i<N;i++) {
			String input = br.readLine();
			for(int j=0;j<N;j++) {
				map[i][j] = input.charAt(j) - '0';
			}
		}
		quadtree(N, 0, 0);
		System.out.print(sb.toString());
		
	}

}
