import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class BOJ_1780 {

	static int arr[][];
	static int res[];
	
	private static void recursion(int r, int c, int size) {  //구역이 같은 숫자로 이루어져있는지 확인하기
		if(size == 1){ //종이 자르는 크기가 1이면 자르는거 끝내기
			if(arr[r][c] == -1)
				res[0]++;
			else if(arr[r][c] == 0)
				res[1]++;
			else
				res[2]++;
			
			return;
		}
		
		if(isAllsame(r, c, arr[r][c], size)) { //현재 r,c로부터 시작해서 size 크기의 종이가 모두 같은 숫자로 이루어진 경우
			if(arr[r][c] == -1)
				res[0]++;
			else if(arr[r][c] == 0)
				res[1]++;
			else
				res[2]++;
			
			return;
		}
		
		//다른 숫자가 섞여있는 경우 종이를 더 자른다.
		recursion(r, c, size/3);  //0, 0, 3
		recursion(r+size/3, c, size/3);  //3, 0 ,3
		recursion(r, c+size/3, size/3);  //0, 3, 3
		recursion(r+size/3, c+size/3, size/3); //3, 3, 3
		recursion(r+(size/3)*2, c, size/3);  //6, 0, 3
		recursion(r, c+(size/3)*2, size/3); // 0, 6, 3
		recursion(r+(size/3)*2, c+(size/3)*2, size/3); // 6, 6, 3
		recursion(r+(size/3), c+(size/3)*2, size/3); // 3, 6, 3
		recursion(r+(size/3)*2, c+(size/3), size/3); // 6, 3, 3
		
		
	}
	
	private static boolean isAllsame(int r, int c, int number, int size) {
		for(int i=r;i<r+size;i++) {
			for(int j=c;j<c+size;j++) {
				if(arr[i][j] != number) //다른 숫자가 나온경우
					return false;
			}
		}
		return true;
	}
	
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int N = Integer.parseInt(br.readLine());
		arr = new int[N][N];
		res = new int [3];
		StringTokenizer st;
		for(int i=0;i<N;i++) {
			st = new StringTokenizer(br.readLine());
			for(int j=0;j<N;j++) {
				arr[i][j] = Integer.parseInt(st.nextToken());
			}
		}
		
		recursion(0,0, N);  //구역의 시작점과 자르는 크기
		
		for(int i=0;i<3;i++)
			System.out.println(res[i]);
		

	}

}
