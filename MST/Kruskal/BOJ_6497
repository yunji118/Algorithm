import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class BOJ_6497 {

	static ArrayList<Edge> edgeList;
	static int parents[];
	
	private static class Edge implements Comparable<Edge>{
		int start, end, weight;
		public Edge(int start, int end, int weight) {
			// TODO Auto-generated constructor stub
			this.start = start;
			this.end = end;
			this.weight = weight;
		}
		
		@Override
		public int compareTo(Edge o) {
			// TODO Auto-generated method stub
			return this.weight - o.weight;
		}
	}
	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st;
		
		while(true) {
			String str = br.readLine();
			st = new StringTokenizer(str);
			int m = Integer.parseInt(st.nextToken());
			int n = Integer.parseInt(st.nextToken());
			
			if(m==0 && n == 0)
				break;
			
			parents = new int [m];
			edgeList = new ArrayList<>();
			int maxCost = 0;
			for(int i=0;i<n;i++) {
				st = new StringTokenizer(br.readLine());
				
				int tempa = Integer.parseInt(st.nextToken());
				int tempb = Integer.parseInt(st.nextToken());
				int tempw = Integer.parseInt(st.nextToken());
				//edgeList.add(new Edge(Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken()),Integer.parseInt(st.nextToken())));		
				edgeList.add(new Edge(tempa, tempb, tempw));
				maxCost += tempw;
			}
			
			for(int i=0;i<m;i++)
				parents[i] = i;
			
			Collections.sort(edgeList);
			
			int cnt = 0;
			int res = 0;
			for(int i=0;i<edgeList.size();i++) {
				if(cnt == m-1)
					break;
				Edge e = edgeList.get(i);
				if(union(e.start, e.end)) {
					res+= e.weight;
					cnt++;
				}
			}
			
			System.out.println(maxCost-res);
		}
		
	}
	
	private static int find(int x) {
		if(x == parents[x])
			return x;
		return parents[x] = find(parents[x]);
	}
	
	private static boolean union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		
		if(aRoot == bRoot)
			return false;
		parents[aRoot]= bRoot;
		return true;
	}

}
