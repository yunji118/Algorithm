import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.StringTokenizer;

public class BOJ_1197 {
	
	static int parents[];
	static ArrayList<Edge> edgeList;
	
	private static class Edge implements Comparable<Edge>{
		int start, end;
		long weight;
		
		public Edge(int start, int end, long weight) {
			// TODO Auto-generated constructor stub
			this.start = start;
			this.end = end;
			this.weight = weight;
		}
		
		@Override
		public int compareTo(Edge o) {
			// TODO Auto-generated method stub
			return Long.compare(this.weight, o.weight);
		}
	}

	public static void main(String[] args) throws IOException {
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int V = Integer.parseInt(st.nextToken());
		int E = Integer.parseInt(st.nextToken());
		parents = new int[V+1];
		edgeList = new ArrayList<>();
		
		for(int i=0;i<E;i++) {
			st = new StringTokenizer(br.readLine());
			int tempx = Integer.parseInt(st.nextToken());
			int tempy = Integer.parseInt(st.nextToken());
			int tempw = Integer.parseInt(st.nextToken());
			
			edgeList.add(new Edge(tempx,tempy,tempw));
		}
		
		for(int i=0;i<V;i++)
			parents[i] = i;
		
		Collections.sort(edgeList);
		
		int cnt =0;
		long res = 0;
		for(int i=0;i<edgeList.size();i++) {
			if(cnt == V-1) 
				break;
			
			Edge e = edgeList.get(i);
			if(union(e.start, e.end)) {
				cnt++;
				res += e.weight;
			}
		}
		
		System.out.println(res);

	}
	private static int find(int x) {
		if(x == parents[x])
			return x;
		return parents[x] = find(parents[x]);
	}
	
	private static boolean union(int a, int b) {
		int aRoot = find(a);
		int bRoot = find(b);
		
		if(aRoot == bRoot)
			return false;
		parents[bRoot] = aRoot;
		return true;
	}
	
	

}
