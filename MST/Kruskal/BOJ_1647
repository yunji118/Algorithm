import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.StringTokenizer;


public class BOJ_1647 {

	static int[] parent;
	static ArrayList<Edge> edgeList;
	
	static class Edge implements Comparable<Edge>{
		int start, end, weight;
		
		public Edge(int start, int end, int weight) {
			// TODO Auto-generated constructor stub
			this.start = start;
			this.end = end;
			this.weight = weight;
		}
		
		@Override
		public int compareTo(Edge o) {   //start, end, weight 중 weight으로 비교하겠다
			// TODO Auto-generated method stub
			return weight - o.weight;
		}
	}
	
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		StringTokenizer st = new StringTokenizer(br.readLine());
		int N = Integer.parseInt(st.nextToken());
		int M = Integer.parseInt(st.nextToken());
		edgeList = new ArrayList<>();
		
		for(int i=0;i<M;i++) {
			st = new StringTokenizer(br.readLine());
			int start = Integer.parseInt(st.nextToken());
			int end = Integer.parseInt(st.nextToken());
			int weight = Integer.parseInt(st.nextToken());
			
			edgeList.add(new Edge(start, end, weight)); //입력 받은 길을 저장하기
		}
		
		parent = new int[N+1]; //집은 1번부터 시작하므로 N+1로 해주기
		for(int i=1;i<=N;i++) {
			parent[i]=i; //일단 자기 자신을 부모로 해두기
		}
		
		Collections.sort(edgeList); //weight을 기준으로 오름차순으로 정렬해두기
		
		
		//일단 먼저 N개의 집이 N-1개의 길로 연결되도록 만들기(MST) 그리고 가장 큰 cost를 갖는 걸 빼주면 2개의 마을로 분할됨! 즉, 최종적인 간선은 N-2개가 됨.
		int ans=0;
		int maxcost = 0;  
		int cnt=0;
		for (int i=0;i<edgeList.size();i++) {
			Edge edge = edgeList.get(i);
			
			/*
			//사이클 발생하면 제외하기
			if(find(edge.start) != find(edge.end)) { //부모가 다르면(=사이클 발생x로 연결할 수 있으면)
				ans += edge.weight;
				union(edge.start, edge.end);  //두 정점 연결
				
				maxcost = edge.weight;	//가장 큰 cost(cost순으로 정렬해놓았으므로 가장 마지막에 선택되는게 가장 큰 cost를 가짐)		
			}
			*/
			
			if(union(edge.start, edge.end)) {
				ans += edge.weight;
				maxcost = edge.weight;
				if(++cnt == N-1)
					break;
			}
						
		}
		
		System.out.println(ans-maxcost);
		

	}
	
	public static int find(int x) {
		if(x==parent[x]) //부모가 자기 자신인 경우
			return x;
		
		return parent[x]=find(parent[x]);     //궁금한 점: 그냥 find(parent[x])로 하면 시간초과 나는데 parent[x]=find(parent[x]); 이렇게하면 시간초과가 안 남..........
		
	}
	
	/*
	public static void union(int x,int y)
	{
		x = find(x);
		y=find(y);
		
		if(x != y) //x와 y의 부모가 다르면
			parent[y] =x;  //연결
	}*/
	
	public static boolean union(int x, int y) {
		int xRoot = find(x);
		int yRoot = find(y);
		if(xRoot == yRoot)
			return false;
		parent[xRoot] = yRoot;
		return true;
	}
}
