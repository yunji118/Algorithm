import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;
import java.util.StringTokenizer;

public class BOJ_9372 {
	
	
	private static ArrayList<Integer> plane[];
	private static boolean visited[];
	private static int cnt;
	private static void bfs(int node) {
		Queue<Integer> que = new LinkedList<Integer>();
		que.add(node);
		int now;
		
		while(!que.isEmpty()) {
			now = que.poll();
			
			if(!visited[now]) {  //아직 방문하지 않은 나라인 경우
				visited[now] = true;
				cnt++;
				for(int i=0;i<plane[now].size();i++) {  //인접한 나라 모두 저장
					int next = plane[now].get(i);
					if(!visited[next]) {
						que.add(next);
					}
				}
			}
		}
		
	}
	
	public static void main(String[] args) throws IOException{
		// TODO Auto-generated method stub
		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
		int T = Integer.parseInt(br.readLine());
		StringTokenizer st;
		StringBuilder sb = new StringBuilder();
		
		for(int i=0;i<T;i++) {
			st = new StringTokenizer(br.readLine());
			int N = Integer.parseInt(st.nextToken());  //국가의 수
			int M = Integer.parseInt(st.nextToken());  //비행기의 종류
			
			visited = new boolean[N+1];
			plane = new ArrayList[N+1];
			for(int l=1;l<=N;l++) {
				plane[l] = new ArrayList<>();
			}
			cnt = 0;
			
			for(int j=0;j<M;j++) {
				//주어지는 비행 그래프
				st = new StringTokenizer(br.readLine());
				int a = Integer.parseInt(st.nextToken()); 
				int b = Integer.parseInt(st.nextToken());
				plane[a].add(b);
				plane[b].add(a);
			}
			
			bfs(1);
			sb.append(cnt-1+"\n");
			
			
			/*way2
			 * MST 알고리즘에 의해 N개의 노드를 연결하는 최소간선의 개수는 N-1개이다.
			 * 따라서 정답은 N-1
			 * 어짜피 주어진 그래프는 연결 그래프이니까.
			 */
		}

		System.out.println(sb.toString());
	}

}
