import java.util.ArrayList;

class Solution {
    static boolean map[][][];
    public static boolean canMake(int x,int y,int a, int n){ // x,y에 기둥을 세울 수 있는가
        if(a == 0){ //기둥
            if(y == 0)//바닥인 경우
                return true;
            else if(map[x][y][1] || (x>0 && map[x-1][y][1])) //x,y에 보의 시작점 or 끝이 있는지 
                return true;
            else if(y>0 && map[x][y-1][0])  //기둥 위
                return true;
        }
        else{ //보
            if(y>0 && map[x][y-1][0]) //시작 점이 기둥 위
                return true;
            else if(x<n && y>0 && map[x+1][y-1][0]) //끝점이 기둥 위
                return true;
            else if(x>0 && x<n && map[x-1][y][1] && map[x+1][y][1])  //양쪽 끝이 보
                return true;
        }
        return false;
    }
    
    public static boolean canRemove(int x, int y, int n){ //x,y에 있는거 삭제해도 되는가
        int[] dx = {-1, 0, 1};  //왼쪽, 현재, 오른쪽
        int[] dy = {-1, 0, 1};  //아래, 현재, 위
        
        for(int i=0;i<3;i++){
            for(int j=0;j<3;j++){
                int nx = x + dx[i];
                int ny = y + dy[j];
                if(nx < 0 || nx>n || ny<0 || ny>n)  //범위를 벗어난 경우
                    continue;
                for(int k=0;k<2;k++){ //삭제했을 때 그 주변 설치물이 존재할 수 없는 경우
                    if(map[nx][ny][k] && !canMake(nx, ny, k, n))  //x,y에 있는걸 삭제해도 그 주변에 있는 nx, ny에 k가 존재할 수 있는가?
                        return false;
                }
            }
        }
        return true;
    }
    
    
    public static int[][] solution(int n, int[][] build_frame) {
        ArrayList<ArrayList<Integer>> answer = new ArrayList<ArrayList<Integer>>();
        map = new boolean [n+1][n+1][2];
       
        
        for(int i=0;i<build_frame.length;i++){
            int x = build_frame[i][0];
            int y = build_frame[i][1];
            int a = build_frame[i][2];
            int b = build_frame[i][3];
            
            if(b == 0){ //삭제
                map[x][y][a] = false; //일단 냅다 삭제하기
                if(!canRemove(x,y,n)) //삭제 가능?
                    map[x][y][a] = true;
            }
            else if(canMake(x,y,a,n)){
                map[x][y][a] = true;
            }
        }
        
        for(int i=0;i<=n;i++){
            for(int j=0;j<=n;j++){
                for(int k=0;k<2;k++){
                    if(map[i][j][k]){
                        ArrayList<Integer> temp = new ArrayList<Integer>();
                        temp.add(i);
                        temp.add(j);
                        temp.add(k);
                        answer.add(temp);
                    }
                }
            }
        }

        int[][] ans = new int[answer.size()][3];
        for(int i=0;i<answer.size();i++){
            for(int j=0;j<answer.get(0).size();j++){
                ans[i][j] = answer.get(i).get(j);
            }
        }
        return ans;
    }
}
